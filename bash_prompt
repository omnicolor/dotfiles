# Apologies to whoever originally wrote this script. I got it from somewhere and
# didn't keep track of where. I've made a bunch of changes to it which makes it
# really hard to tell what's mine and what's not. If you wrote it and want
# credit where credit is due, let me know.
#
# Subversion prompt code was adapted from https://gist.github.com/woods/31967
#
# This changes the prompt when you're in a git repository:
# foo-repo(123) /bar/mitz$
# where foo-repo is the repository name, 1 (in yellow) is the number of files
# currently changed but not commited, 2 (in green) is the number of files
# committed but not pushed, and 3 (in red) is the number of changes that have
# been pushed upstream that you haven't pulled. bar and mitz show that you've
# gone down two directories from the root of the repository. It will show up to
# three directories deep.
#
# In a Subversion repository, it changes it to:
# (1 trunk) /bar/mitz$
# where 1 (in yellow) shows changes that haven't been committed, trunk is the
# current branch, and bar and mitz show that you've gone down two directories.
# Note that the change number shows changes for the part of the tree that you're
# in, not the whole checkout. In the above example, that means there's one edit
# in the tree starting at bar/mitz, *not* from /.

reset='\[\e[00m\]'
bold='\[\e[01m\]'
red='\[\e[31m\]'
green='\[\e[32m\]'
orange='\[\e[33m\]'
blue='\[\e[34m\]'
purple='\[\e[35m\]'
cyan='\[\e[36m\]'
gray='\[\e[37m\]'
bright='\[\e[39m\]'

# Chop up the working directory to make it prettier
# In a git or subversion repository, returns up to the last three subdirectories
# from the repo's root.
# Otherwise returns up to the last three subdirectories of the whole path.
function short_pwd {
    if [ $GIT -ne 0 -o $SVN -ne 0 ]; then
        username=`whoami`
        pwd=$(pwd | sed -e "s/\/$username//" | sed -e 's/\/home//' | sed -e 's/\/Users//' | sed -e 's/var\///')
    else
        pwd=$(pwd | sed -e 's/ /_/g')
    fi
    first=$(basename $pwd)
    rest=$(dirname $pwd)
    second=$(basename $rest)
    rest=$(dirname $rest)
    if [ 'Sites' = $second -o 'code' = $second -o 'www' = $second ]; then
        first=$(basename $rest)
        rest=$(dirname $pwd)
        second=$(basename $rest)
        rest=$(dirname $rest)
    fi
    third=$(basename $rest)
    rest=$(dirname $rest)
    if [ 'Sites' = $third -o 'code' = $third -o 'www' = $third ]; then
        second="/"
    fi
    fourth=$(basename $rest)
    if [ 'Sites' = $fourth -o 'code' = $fourth -o 'www' = $fourth ]; then
        third="/"
    fi

    if [ $first = "/" ]; then
        echo -n "/"
    elif [ $second = "/" ]; then
        echo -n "/$first"
    elif [ $third = "/" ]; then
        echo -n "/$second/$first"
    else
        echo -n "$third/$second/$first"
    fi
}

# Return the type of directory we're in
# 0 Means not a git repository
# 1 Means it is a normal repository
# 2 Means it's a bare repository
function isGit {
    git_top=$(git rev-parse --show-toplevel 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "0"
        return
    fi
    git_top=$(basename $git_top 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "2"
        return
    fi
    echo "1"
    return
}

# Returns whether the directory is a SVN repository
# 0 Means we're not
# 1 Means we are
function isSvn {
    if [ -d '.svn' ]; then
        echo "1"
        return
    fi
    echo "0"
}

# Shiny up the prompt
function myprompt {
    SVN=$(isSvn)
    GIT=$(isGit)

    if [ $GIT -ne 0 ]; then
        # Show a fancy git prompt.
        git_top=$(git rev-parse --show-toplevel 2>/dev/null)
        if [ $? -ne 0 ]; then
            git_top=$(git rev-parse --git-dir)
        else
            git_top=$(basename $git_top 2>/dev/null)
            if [ $? -ne 0 ]; then
                git_top=$(basename `pwd`)
            fi
        fi

        git_branch=""
        if [ $GIT -ne 2 ]; then
            git_branch=$(git symbolic-ref HEAD 2>/dev/null)
            if [ $? -ne 0 ]; then
                git_branch=""
            fi

            detached=$(git status | head -1 | grep detached | sed 's/HEAD detached at //')
            if [ $detached ]; then
                branch=" $detached"
            else
                branch=" $bold$red$(basename $git_branch)$reset"
            fi
        else
            branch=" $bold${red}bare$reset"
        fi
    elif [ $SVN -ne 0 ]; then
        # Show a fancy Subversion prompt.
        svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"
        branch_pattern="^URL: .*/(branches)/(.+)"
        trunk_pattern="^URL: .*/trunk(/.*)?$"
        project_pattern="^URL: .*/(projects)/(.+)"
        if [[ $svn_info =~ $branch_pattern ]]; then
            branch=`echo ${BASH_REMATCH[2]}`
        elif [[ $svn_info =~ $project_pattern ]]; then
            branch=`echo ${BASH_REMATCH[2]}`
        elif [[ $svn_info =~ $trunk_pattern ]]; then
            branch='trunk'
        else
            branch=''
        fi
    fi

    hostname=""
    if [ "$SSH_CONNECTION" ]; then
        # We're on a different system than normal, add the hostname.
        hostname="${cyan}$(hostname | cut -f1 -d'.') $reset"
    fi

    if [ $GIT -ne 0 ]; then
        # We're in a git repository.
        colordir="${bold}${blue}$(short_pwd)"
        EDITS=$(git status -s | wc -l | tr -d ' ')
        if [ $EDITS -ne 0 ]; then
            edits="$bold$orange$EDITS$reset"
        else
            edits="${orange}0$reset"
        fi
        AHEAD=$(git rev-list origin..HEAD 2>/dev/null | wc -l | tr -d ' ')
        BEHIND=$(git rev-list HEAD..origin 2>/dev/null | wc -l | tr -d ' ')
        if [ $AHEAD -gt 9 ]; then
            AHEAD="$bold$green+$reset"
        elif [ $AHEAD -ne 0 ]; then
            AHEAD="$bold$green$AHEAD$reset"
        else
            AHEAD="${green}0"
        fi
        if [ $BEHIND -gt 9 ]; then
            BEHIND="$bold${red}+"
        elif [ $BEHIND -ne 0 ]; then
            BEHIND="$bold$red$BEHIND"
        else
            BEHIND="${red}0"
        fi
        git="${bold}${green}$git_top$gray($edits$AHEAD$BEHIND"
        PS1="$git$branch$gray) $colordir$reset\$ "
    elif [ $SVN -ne 0 ]; then
        dir=$(short_pwd)
        if [ $dir != "/" ]; then
            branch=`echo $branch | sed -e "s#$dir##"`
        fi
        colordir="${bold}${blue}$dir"
        PS1="$gray($red$branch$gray) $colordir$reset\$ "
    else
        colordir="${bold}${blue}$(pwd)"
        PS1="$colordir$reset\$ "
    fi
    if [ $VIRTUAL_ENV ]; then
        PS1="$bold$cyan$(basename $VIRTUAL_ENV)$reset $PS1"
    fi
    PS1="$hostname$PS1"
}

unset PS1
PROMPT_COMMAND=myprompt
